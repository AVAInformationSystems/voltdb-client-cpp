4/3/12 **UPDATE**
New makefile in progress. Old build system thrown out for now.
TODO before merge to master:
1) Dynamic libs
2) Script to build libevent from tgz
3) Updating readme (here)

2/28/12 **UPDATE**
This file has a fallen out of date in some places, here is a quick update
libevent and the boost shared ptr are now included so they aren't external dependencies.
build_static.sh will build libevent and the client library (shared and static) and package it
into volt_cpp.tgz. This should make it a lot easier to compile. Also shared pointers are now
thread safe everywhere although the client library still isn't making threadsafe use of libevent
so you should use one per thread.

I added an interrupt method and enabled thread safety in libevent so you should be able
to call interrupt on an event base. You can use the client from multiple threads
by dedicating a thread to the event loop and having it pull new invocations off
of a thread safe queue. Threads that insert invocations into the queue can call interrupt afterwards
so the event thread picks them up promptly. This method needs testing.

Contents

-- Build directories
AsyncHelloWorld
HelloWorld
Library Debug
Library Release
Tests

These contain build files generated by Eclipse CDT. These are makefiles so you can run make in the appropriate directory to build the target. If a build fails you will need to run make clean before running make again. The first two (AsyncHelloWorld, HelloWorld) build the two example applications and they require that one of the libraries (Debug or Release) already be built. The next two (Library Debug, Library Release) generate debug and release versions of the shared library. The flags on the release version are less strict and will compile on more platforms. Unless you are actively working on the library you should use the release version. The last one builds the Tests executable that can be used to run the unit tests. The unit tests require cppunit to be installed and in your library path.

-- Source directories
src
include
test

Source contains the compilation units for the shared library as well as the example applications. include contains headers for the API as well as the implementation. test contains source for the unit tests.

Build instructions

The C++ client library depends on openssl (libssl), libevent 2.05, and boost. libevent 2.05 is beta and is not packaged with any distros so you will have to build it yourself. The good news is that it compiles easily on CentOS 5 and Ubuntu 10.04. Additionally, tests require CPPUnit. Eclipse is being used to manage the project and auto-generate the makefiles. Don't commit changes to the makefiles because they will be overwritten by Eclipse.

You should be able to get the boost, openssl and cppunit headers from a package for your distro. For example:

    * sudo apt-get install libboost-all-dev
    * sudo apt-get install libssl-dev
    * sudo apt-get install libcppunit-dev

Note that as of 7/29/2010, the boost-devel pacakge on CentOS is out of date and is not compatible with this C++ client library, so you will have to download and install the latest version of boost yourself. If all you want to do is build the library then the headers are sufficient. If you want to run the tests you will need to build boost.

The project is configured to add ${HOME}/lib and ${HOME}/include so that you can build libevent 2.05 and install it under ${HOME} home directory. Alternately, you can set CPLUS_INCLUDE_PATH and LIBRARY_PATH accordingly. For example, if you built libevent with --prefix=${HOME}/local:

    * export LIBRARY_PATH=${HOME}/local/lib
    * export CPLUS_INCLUDE_PATH=${HOME}/local/include/

There are five build configurations right now. HelloWorld, AsyncHelloWorld, Library Debug, Library Release, and Tests. The first two build example applications that can be used with the Hello World example from the distribution. The next two build a .so with different settings. To build each one you can cd into the appropriate directory and type "make" and it should build and produce the result file in the same directory. The HelloWorld and AsyncHelloWorld examples depend on the .so file so you need to have the debug or release library built.  For example:

    * cd Library\ Debug
    * make
    * cd ../Tests
    * make
    * cd ../HelloWorld
    * make


Building libevent 2.05

First download libevent 2.05 from http://monkey.org/~provos/libevent-2.0.5-beta.tar.gz Unzip it and do

./configure --prefix=${HOME} #Instructs it to compile for installation into your home directory in ${HOME}/lib and ${HOME}/include
make
make verify
make install


The reason you want to install it into your home directory is that you will be working outside the package system and you don't want to sully your system directory. This leaves the upgrade path open when libevent 2 comes as a package from your distro.

Running the tests

Once you have built either version of the shared library you can build the tests using the makefile in Tests and then run the Tests executable that is build. It is highly recommended that you run the tests under valgrind using "valgrind
--leak-check=full --show-reachable=yes". The application should exit with all heap blocks freed. If you are running with the debug library there will be two errors generated by some global state in libevent and these are safe to ignore.
 Sometimes a block is retained somewhere in libc, but it doesn't always show up. The library itself should not retain any memory.

Note that if you already have a VoltDB server running, the tests will fail. Kill the server and try again.

API description

The C++ client API is single threaded. The shared pointers that are returned are not thread safe and the Client instances are not thread safe. Because it is single threaded your application has to provide its thread to the API to do network IO and invoke callbacks. At key points your application can call run() to enter an event loop that will not exit until a callback returns true or one of the status listener notificaiton methods returns true. An application can also call runOnce() or spin in a loop on runOnce(). runOnce() does network IO and invokes callbacks, but returns immediately after all pending events have been handled.

Unlike the Java client library the C++ library is relatively lightweight (creates no additional threads) so you can instantiate multiple instances on a single host. If you find you need more parallelism you should consider creating multiple threads, each with a dedicated client instance, and connect each instance to a different subset of the cluster. A single thread should be able to saturate gig-e.

Known Issues

One of the serialization tests doesn't pass when compiled and run on Ubuntu 10.04 32-bit. The problem is specific to the serialization of Decimal values. Avoid using Decimal values on 32-bit platforms until CLIENTAPI-2 is fixed. https://issues.voltdb.com/browse/CLIENTAPI-2

Uncaught exception handler may be provided with the wrong procedure callback pointer if it ends up being wrapped internally. The wrapper is provided instead of the callback. See https://issues.voltdb.com/browse/CLIENTAPI-33
