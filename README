Build instructions

The C++ client library depends on openssl (libssl) and libevent 2.05. libevent 2.05 is beta and is not packaged with any distros so you will have to build it yourself. The good news is that it compiles easily on CentOS 5 and Ubuntu 10.04. Eclipse is being used to manage the project and auto-generate the makefiles. Don't commit changes to the makefiles because they will be overwritten by Eclipse. The project is configured to add ${HOME}/lib and ${HOME}/include so that you build libevent 2.05 and install it into your home directory.

There are four build configurations right now. HelloWorld, AsyncHelloWorld, Library Debug, and Library Release. The first two build example applications that can be used with the Hello World example from the distribution. The last two build a .so with different settings. To build each one you can cd into the appropriate directory and type "make" and it should build and produce the result file in the same directory.

Building libevent 2.05

First download libevent 2.05 from http://monkey.org/~provos/libevent-2.0.5-beta.tar.gz Unzip it and do
./configure --prefix=${HOME} #Instructs it to compile for installation into your home directory in ${HOME}/lib and ${HOME}/include
make
make verify
make install

The reason you want to install it into your home directory is that you will be working outside the package system and you don't want to sully your system directory. This leaves the upgrade path open when libevent 2 comes as a package from your distro.

The C++ client API is single threaded. The shared pointers that are returned are not thread safe and the Client instances are not thread safe. Because it is single threaded your application has to provide its thread to the API to do network IO and invoke callbacks. At key points your application can call run() to enter an event loop that will not exit until a callback returns true. An application can also call runOnce() or spin in a loop on runOnce(). runOnce() does network IO and invokes callbacks, but returns immediately after all pending events have been handled.

To do:
Implement exceptions to be thrown by the API for error cases. Add a status listener that client applications can provide that is invoked when a connection is lost, a callback throws an unhandled exception, or there is backpressure.

All documentation.
